JavaScript HTML DOM
    - With the HTML DOM, JavaScript can access and change all the elements of an HTML document.
    - The HTML DOM (Document Object Model)
        - When a web page is loaded, the browser creates a Document Object Model of the page.
        - The HTML DOM model is constructed as a tree of Objects:
        - Document:
            - Root element: <html>
                - Element: <head>
                    - Element: <title>
                        - Text: "My title"
                - Element<body>:
                    - Element: <a>
                        - Attribute: "href"
                        - Text: "My link"
                    - Element: <h1>
                        - Text: "My header"
        - With the object model, JavaScript gets all the power it needs to create dynamic HTML:
            - JavaScript can change all the HTML elements in the page
            - JavaScript can change all the HTML attributes in the page
            - JavaScript can change all the CSS styles in the page
            - JavaScript can remove existing HTML elements and attributes
            - JavaScript can add new HTML elements and attributes
            - JavaScript can react to all existing HTML events in the page
            - JavaScript can create new HTML events in the page
        - What You Will Learn:
            - In the next chapters of this tutorial you will learn:
                - How to change the content of HTML elements
                - How to change the style (CSS) of HTML elements
                - How to react to HTML DOM events
                - How to add and delete HTML elements
        - What is the DOM?
            - The DOM is a W3C (World Wide Web Consortium) standard.
            - The DOM defines a standard for accessing documents:
            - "The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs
               and scripts to dynamically access and update the content, structure, and style of a document."
            - The W3C DOM standard is separated into 3 different parts:
                - Core DOM - standard model for all document types
                - XML DOM - standard model for XML documents
                - HTML DOM - standard model for HTML documents
        - What is the HTML DOM?
            - The HTML DOM is a standard object model and programming interface for HTML. It defines:
                - The HTML elements as objects
                - The properties of all HTML elements
                - The methods to access all HTML elements
                - The events for all HTML elements
            - In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.
##############################################
JavaScript - HTML DOM Methods
    - HTML DOM methods are actions you can perform (on HTML Elements).
    - HTML DOM properties are values (of HTML Elements) that you can set or change.
    - The DOM Programming Interface
        - The HTML DOM can be accessed with JavaScript (and with other programming languages).
        - In the DOM, all HTML elements are defined as objects.
        - The programming interface is the properties and methods of each object.
        - A property is a value that you can get or set (like changing the content of an HTML element).
        - A method is an action you can do (like add or deleting an HTML element).
    - Example:
        - The following example changes the content (the innerHTML) of the <p> element with id="demo":
            <html>
            <body>
            <p id="demo"></p>
            <script>
            document.getElementById("demo").innerHTML = "Hello World!";
            </script>
            </body>
            </html>
        - In the example above, getElementById is a method, while innerHTML is a property.
    - The innerHTML property can be used to get or change any HTML element, including <html> and <body>.
#######################################################
JavaScript HTML DOM Document
    - The HTML DOM document object is the owner of all other objects in your web page.
    - The HTML DOM Document Object
        - The document object represents your web page.
        - If you want to access any element in an HTML page, you always start with accessing the document object.
        - Below are some examples of how you can use the document object to access and manipulate HTML.
    - Finding HTML Elements:
        Method	Description
        document.getElementById(id)	Find an element by element id
        document.getElementsByTagName(name)	Find elements by tag name
        document.getElementsByClassName(name)	Find elements by class name
    - Changing HTML Elements:
        Property	Description
        element.innerHTML =  new html content	Change the inner HTML of an element
        element.attribute = new value	Change the attribute value of an HTML element
        element.style.property = new style	Change the style of an HTML element
        Method	Description
        element.setAttribute(attribute, value)	Change the attribute value of an HTML element
    - Adding and Deleting Elements:
        Method	Description
        document.createElement(element)	Create an HTML element
        document.removeChild(element)	Remove an HTML element
        document.appendChild(element)	Add an HTML element
        document.replaceChild(new, old)	Replace an HTML element
        document.write(text)	Write into the HTML output stream
    - Adding Events Handlers
        Method	Description
        document.getElementById(id).onclick = function(){code}	Adding event handler code to an onclick event
    - Finding HTML Objects:
        Property	Description	DOM
        document.anchors	Returns all <a> elements that have a name attribute	1
        document.applets	Deprecated	1
        document.baseURI	Returns the absolute base URI of the document	3
        document.body	Returns the <body> element	1
        document.cookie	Returns the document's cookie	1
        document.doctype	Returns the document's doctype	3
        document.documentElement	Returns the <html> element	3
        document.documentMode	Returns the mode used by the browser	3
        document.documentURI	Returns the URI of the document	3
        document.domain	Returns the domain name of the document server	1
        document.domConfig	Obsolete.	3
        document.embeds	Returns all <embed> elements	3
        document.forms	Returns all <form> elements	1
        document.head	Returns the <head> element	3
        document.images	Returns all <img> elements	1
        document.implementation	Returns the DOM implementation	3
        document.inputEncoding	Returns the document's encoding (character set)	3
        document.lastModified	Returns the date and time the document was updated	3
        document.links	Returns all <area> and <a> elements that have a href attribute	1
        document.readyState	Returns the (loading) status of the document	3
        document.referrer	Returns the URI of the referrer (the linking document)	1
        document.scripts	Returns all <script> elements	3
        document.strictErrorChecking	Returns if error checking is enforced	3
        document.title	Returns the <title> element	1
        document.URL	Returns the complete URL of the document	1
##########################################
JavaScript HTML DOM Elements
    - Finding HTML Elements:
        - Often, with JavaScript, you want to manipulate HTML elements.
        - To do so, you have to find the elements first. There are several ways to do this:
            - Finding HTML elements by id: const element = document.getElementById("intro");
                - If the element is found, the method will return the element as an object (in element).
                - If the element is not found, element will contain null.
            - Finding HTML elements by tag name: const element = document.getElementsByTagName("p");
                - This example finds the element with id="main", and then finds all <p> elements inside "main":
                    const x = document.getElementById("main");
                    const y = x.getElementsByTagName("p");
            - Finding HTML elements by class name: const x = document.getElementsByClassName("intro");
                - If you want to find all HTML elements with the same class name, use getElementsByClassName().
                - This example returns a list of all elements with class="intro".
            - Finding HTML elements by CSS selectors:
                - If you want to find all HTML elements that match a specified CSS selector 
                  (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method.
                - This example returns a list of all <p> elements with class="intro".
                    const x = document.querySelectorAll("p.intro"); 
            - Finding HTML elements by HTML object collections:
                - This example finds the form element with id="frm1", in the forms collection, and displays all element values:
                    const x = document.forms["frm1"];
                    let text = "";
                    for (let i = 0; i < x.length; i++) {
                        text += x.elements[i].value + "<br>";
                    }
                    document.getElementById("demo").innerHTML = text;
################################################
JavaScript HTML DOM - Changing CSS
    - To change the style of an HTML element, use this syntax:
        - document.getElementById(id).style.property = new style
################################################
JavaScript HTML DOM Events
    - HTML DOM allows JavaScript to react to HTML events:
    - Reacting to Events:
        - A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.
        - To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:
            onclick=JavaScript
        - Examples of HTML events:
            - When a user clicks the mouse
            - When a web page has loaded
            - When an image has been loaded
            - When the mouse moves over an element
            - When an input field is changed
            - When an HTML form is submitted
            - When a user strokes a key
        - In this example, the content of the <h1> element is changed when a user clicks on it:
            <h1 onclick="this.innerHTML = 'Ooops!'">Click on this text!</h1>
        - In this example, a function is called from the event handler:
            <h1 onclick="changeText(this)">Click on this text!</h1>
            <script>
                function changeText(id) {
                    id.innerHTML = "Ooops!";
                }
            </script>
    - Assign Events Using the HTML DOM;
        <script>
            document.getElementById("myBtn").onclick = displayDate;
        </script>
########################################################
JavaScript HTML DOM EventListener
    - The addEventListener() method
        - Example
                - Add an event listener that fires when a user clicks a button:
                    document.getElementById("myBtn").addEventListener("click", displayDate);
            - The addEventListener() method attaches an event handler to the specified element.
            - The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.
            - You can add many event handlers to one element.
            - You can add many event handlers of the same type to one element, i.e two "click" events.
            - You can add event listeners to any DOM object not only HTML elements. i.e the window object.
            - The addEventListener() method makes it easier to control how the event reacts to bubbling.
            - When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.
            - You can easily remove an event listener by using the removeEventListener() method.
        - Syntax:
            element.addEventListener(event, function, useCapture);
                - The first parameter is the type of the event (like "click" or "mousedown" or any other HTML DOM Event.)
                - The second parameter is the function we want to call when the event occurs.
                - The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.
                - Note that you don't use the "on" prefix for the event; use "click" instead of "onclick".
        - Event Bubbling or Event Capturing?
            - There are two ways of event propagation in the HTML DOM, bubbling and capturing.
            - Event propagation is a way of defining the element order when an event occurs. If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's "click" event should be handled first?
            - In bubbling the inner most element's event is handled first and then the outer:
            the <p> element's click event is handled first, then the <div> element's click event.
            - In capturing the outer most element's event is handled first and then the inner:
            the <div> element's click event will be handled first, then the <p> element's click event.
            - With the addEventListener() method you can specify the propagation type by using the "useCapture" parameter:
                addEventListener(event, function, useCapture);
            - The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.
                - Example
                    - document.getElementById("myP").addEventListener("click", myFunction, true);
                    - document.getElementById("myDiv").addEventListener("click", myFunction, true);
    - The removeEventListener() method
        - The removeEventListener() method removes event handlers that have been attached with the addEventListener() method:
            element.removeEventListener("mousemove", myFunction);
#############################################
JavaScript HTML DOM Navigation
    - With the HTML DOM, you can navigate the node tree using node relationships.
    - DOM Nodes
        - According to the W3C HTML DOM standard, everything in an HTML document is a node:
            - The entire document is a document node
            - Every HTML element is an element node
            - The text inside HTML elements are text nodes
            - Every HTML attribute is an attribute node (deprecated)
            - All comments are comment nodes
        - With the HTML DOM, all nodes in the node tree can be accessed by JavaScript.
        - New nodes can be created, and all nodes can be modified or deleted.
    - Node Relationships:
        - The nodes in the node tree have a hierarchical relationship to each other.
        - The terms parent, child, and sibling are used to describe the relationships.
            - In a node tree, the top node is called the root (or root node)
            - Every node has exactly one parent, except the root (which has no parent)
            - A node can have a number of children
            - Siblings (brothers or sisters) are nodes with the same parent
        - example:
            <html>
                <head>
                    <title>DOM Tutorial</title>
                </head>
                <body>
                    <h1>DOM Lesson one</h1>
                    <p>Hello world!</p>
                </body>
            </html>
            From the HTML above you can read:
                - <html> is the root node
                - <html> has no parents
                - <html> is the parent of <head> and <body>
                - <head> is the first child of <html>
                - <body> is the last child of <html>
            and:
                - <head> has one child: <title>
                - <title> has one child (a text node): "DOM Tutorial"
                - <body> has two children: <h1> and <p>
                - <h1> has one child: "DOM Lesson one"
                - <p> has one child: "Hello world!"
                - <h1> and <p> are siblings
    - Navigating Between Nodes
        - You can use the following node properties to navigate between nodes with JavaScript:
            - parentNode
            - childNodes[nodenumber]
            - firstChild
            - lastChild
            - nextSibling
            - previousSibling
    - Child Nodes and Node Values:
        - A common error in DOM processing is to expect an element node to contain text.
        - example:
                <title id="demo">DOM Tutorial</title>
            - The element node <title> (in the example above) does not contain text.
            - It contains a text node with the value "DOM Tutorial".
            - The value of the text node can be accessed by the node's innerHTML property:
                myTitle = document.getElementById("demo").innerHTML;
            - Accessing the innerHTML property is the same as accessing the nodeValue of the first child:
                myTitle = document.getElementById("demo").firstChild.nodeValue;
            - Accessing the first child can also be done like this:
                myTitle = document.getElementById("demo").childNodes[0].nodeValue;
###########################################
JavaScript HTML DOM Elements (Nodes)
    - Creating New HTML Elements (Nodes)
    - To add a new element to the HTML DOM, you must create the element (element node) first, and then append it to an existing element.
        - Example
            <div id="div1">
                <p id="p1">This is a paragraph.</p>
                <p id="p2">This is another paragraph.</p>
            </div>

            <script>
                const para = document.createElement("p");
                const node = document.createTextNode("This is new.");
                para.appendChild(node);

                const element = document.getElementById("div1");
                element.appendChild(para);
            </script>
##############################################
JavaScript HTML DOM Collections
    - The HTMLCollection Object
        - The getElementsByTagName() method returns an HTMLCollection object.
        - An HTMLCollection object is an array-like list (collection) of HTML elements.
        - The following code selects all <p> elements in a document:
            Example
                const myCollection = document.getElementsByTagName("p");
        - The elements in the collection can be accessed by an index number.
        - To access the second <p> element you can write:
            myCollection[1]
        - An HTMLCollection is NOT an array!
            - An HTMLCollection may look like an array, but it is not.
            - You can loop through the list and refer to the elements with a number (just like an array).
            - However, you cannot use array methods like valueOf(), pop(), push(), or join() on an HTMLCollection.
#################################################
JavaScript HTML DOM Node Lists
    - A NodeList object is a list (collection) of nodes extracted from a document.
    - A NodeList object is almost the same as an HTMLCollection object.
    - Some (older) browsers return a NodeList object instead of an HTMLCollection for methods like getElementsByClassName().
    - All browsers return a NodeList object for the property childNodes. 
    - Most browsers return a NodeList object for the method querySelectorAll().
    - The following code selects all <p> nodes in a document:
        const myNodeList = document.querySelectorAll("p");
            - The elements in the NodeList can be accessed by an index number.
            - To access the second <p> node you can write:
                myNodeList[1]
    - The Difference Between an HTMLCollection and a NodeList
        - A NodeList and an HTMLcollection is very much the same thing.
        - Both are array-like collections (lists) of nodes (elements) extracted from a document. The nodes can be accessed by index numbers. The index starts at 0.
        - Both have a length property that returns the number of elements in the list (collection).
        - An HTMLCollection is a collection of document elements.
        - A NodeList is a collection of document nodes (element nodes, attribute nodes, and text nodes).
        - HTMLCollection items can be accessed by their name, id, or index number.
        - NodeList items can only be accessed by their index number.
        - An HTMLCollection is always a live collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.
        - A NodeList is most often a static collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.
        - The getElementsByClassName() and getElementsByTagName() methods return a live HTMLCollection.
        - The querySelectorAll() method returns a static NodeList.
        - The childNodes property returns a live NodeList.
#########################################################
JS Browser BOM
    - The Browser Object Model (BOM) allows JavaScript to "talk to" the browser.
    - The window.screen object contains information about the user's screen.
    - The window.location object can be used to get the current page address (URL) and to redirect the browser to a new page.
    - The window.history object contains the browsers history.
        - Some methods:
            - history.back() - same as clicking back in the browser
            - history.forward() - same as clicking forward in the browser
    - The window.navigator object contains information about the visitor's browser.
        - The window.navigator object can be written without the window prefix.
        Some examples:
            - navigator.cookieEnabled
            - navigator.appCodeName
            - navigator.platform
###########################################################
JavaScript Popup Boxes
    - JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.
    - Alert Box
        - An alert box is often used if you want to make sure information comes through to the user.
        - When an alert box pops up, the user will have to click "OK" to proceed.
    - Confirm Box
        - A confirm box is often used if you want the user to verify or accept something.
        - When a confirm box pops up, the user will have to click either "OK" or "Cancel" to proceed.
        - If the user clicks "OK", the box returns true. If the user clicks "Cancel", the box returns false.
    - Prompt Box
        - A prompt box is often used if you want the user to input a value before entering a page.
        - When a prompt box pops up, the user will have to click either "OK" or "Cancel" to proceed after entering an input value.
        - If the user clicks "OK" the box returns the input value. If the user clicks "Cancel" the box returns null.
###########################################################
JavaScript Timing Events
    - Timing Events
        - The window object allows execution of code at specified time intervals.
        - These time intervals are called timing events.
        - The two key methods to use with JavaScript are:
            setTimeout(function, milliseconds): Executes a function, after waiting a specified number of milliseconds.
            setInterval(function, milliseconds): Same as setTimeout(), but repeats the execution of the function continuously.
        - The setTimeout() and setInterval() are both methods of the HTML DOM Window object.
    - How to Stop the Execution?
        - The clearTimeout() method stops the execution of the function specified in setTimeout().
            window.clearTimeout(timeoutVariable)
        - The clearInterval() method stops the executions of the function specified in the setInterval() method.
            window.clearInterval(timerVariable)