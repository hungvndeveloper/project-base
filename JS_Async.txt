JS Async
########################################
JavaScript Callbacks
    - "I will call back later!"
    - A callback is a function passed as an argument to another function
    - This technique allows a function to call another function
    - A callback function can run after another function has finished
    - Function Sequence:
        - JavaScript functions are executed in the sequence they are called. Not in the sequence they are defined.
        - This example will end up displaying "Goodbye":
            function myFirst() {
                myDisplayer("Hello");
            }
            function mySecond() {
                myDisplayer("Goodbye");
            }
            myFirst();
            mySecond();
        - This example will end up displaying "Hello":
            function myFirst() {
                myDisplayer("Hello");
            }
            function mySecond() {
                myDisplayer("Goodbye");
            }
            mySecond();
            myFirst();
    - Sequence Control:
        - Sometimes you would like to have better control over when to execute a function.
        - Suppose you want to do a calculation, and then display the result.
        - You could call a calculator function (myCalculator), save the result, and then call another function (myDisplayer) to display the result:
        - Example 1:
            function myDisplayer(some) {
                document.getElementById("demo").innerHTML = some;
            }
            function myCalculator(num1, num2) {
                let sum = num1 + num2;
                return sum;
            }
            let result = myCalculator(5, 5);
            myDisplayer(result);
        - Or, you could call a calculator function (myCalculator), and let the calculator function call the display function (myDisplayer):
        - Example 2:
            function myDisplayer(some) {
                document.getElementById("demo").innerHTML = some;
            }
            function myCalculator(num1, num2) {
                let sum = num1 + num2;
                myDisplayer(sum);
            }
            myCalculator(5, 5);
        - The problem with the first example above, is that you have to call two functions to display the result.
        - The problem with the second example, is that you cannot prevent the calculator function from displaying the result.
        - Now it is time to bring in a callback.
    - JavaScript Callbacks:
        - A callback is a function passed as an argument to another function.
        - Using a callback, you could call the calculator function (myCalculator) with a callback (myCallback), 
          and let the calculator function run the callback after the calculation is finished:
        - Example
            function myDisplayer(some) {
                document.getElementById("demo").innerHTML = some;
            }
            function myCalculator(num1, num2, myCallback) {
                let sum = num1 + num2;
                myCallback(sum);
            }
            myCalculator(5, 5, myDisplayer);
        - In the example above, myDisplayer is a called a callback function.
        - It is passed to myCalculator() as an argument.
        - Note
            - When you pass a function as an argument, remember not to use parenthesis.
            - Right: myCalculator(5, 5, myDisplayer);
            - Wrong: myCalculator(5, 5, myDisplayer());
        - Example
            // Create an Array
            const myNumbers = [4, 1, -20, -7, 5, 9, -6];

            // Call removeNeg with a callback
            const posNumbers = removeNeg(myNumbers, (x) => x >= 0);

            // Display Result
            document.getElementById("demo").innerHTML = posNumbers;

            // Keep only positive numbers
            function removeNeg(numbers, callback) {
                const myArray = [];
                for (const x of numbers) {
                    if (callback(x)) {
                        myArray.push(x);
                    }
                }
                return myArray;
            }
        - In the example above, (x) => x >= 0 is a callback function.
        - It is passed to removeNeg() as an argument.
    - When to Use a Callback?
        - The examples above are not very exciting.
        - They are simplified to teach you the callback syntax.
        - Where callbacks really shine are in asynchronous functions, where one function has to wait for another function (like waiting for a file to load).
        - Asynchronous functions are covered in the next chapter.
#######################################################
Asynchronous JavaScript
    - "I will finish later!"
    - Functions running in parallel with other functions are called asynchronous
    - A good example is JavaScript setTimeout()
    - Asynchronous JavaScript:
        - In the real world, callbacks are most often used with asynchronous functions.
        - A typical example is JavaScript setTimeout().
    - Waiting for a Timeout;
        - When using the JavaScript function setTimeout(), you can specify a callback function to be executed on time-out:
            - Example
                setTimeout(myFunction, 3000);
                function myFunction() {
                    document.getElementById("demo").innerHTML = "I love You !!";
                }
            - In the example above, myFunction is used as a callback.
            - myFunction is passed to setTimeout() as an argument.
            - 3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds.
        - Note
            - When you pass a function as an argument, remember not to use parenthesis.
            - Right: setTimeout(myFunction, 3000);
            - Wrong: setTimeout(myFunction(), 3000);
        - Instead of passing the name of a function as an argument to another function, you can always pass a whole function instead:
            - Example
                setTimeout(function() { myFunction("I love You !!!"); }, 3000);
                function myFunction(value) {
                    document.getElementById("demo").innerHTML = value;
                }
            - In the example above, function(){ myFunction("I love You !!!"); } is used as a callback.
              It is a complete function. The complete function is passed to setTimeout() as an argument.
            - 3000 is the number of milliseconds before time-out, so myFunction() will be called after 3 seconds.
    - Waiting for Intervals:
        - When using the JavaScript function setInterval(), you can specify a callback function to be executed for each interval:
            - Example
                setInterval(myFunction, 1000);
                function myFunction() {
                    let d = new Date();
                    document.getElementById("demo").innerHTML=
                    d.getHours() + ":" +
                    d.getMinutes() + ":" +
                    d.getSeconds();
                }
            - In the example above, myFunction is used as a callback.
            - myFunction is passed to setInterval() as an argument.
            - 1000 is the number of milliseconds between intervals, so myFunction() will be called every second.
    - Callback Alternatives
        - With asynchronous programming, JavaScript programs can start long-running tasks, and continue running other tasks in paralell.
        - But, asynchronus programmes are difficult to write and difficult to debug.
        - Because of this, most modern asynchronous JavaScript methods don't use callbacks. Instead, in JavaScript, asynchronous programming is solved using Promises instead.
#################################################
JavaScript Promises
    - "I Promise a Result!"
    - "Producing code" is code that can take some time
    - "Consuming code" is code that must wait for the result
    - A Promise is an Object that links Producing code and Consuming code
    - JavaScript Promise Object:
        - A Promise contains both the producing code and calls to the consuming code:
            - Promise Syntax
                let myPromise = new Promise(function(myResolve, myReject) {
                    // "Producing Code" (May take some time)
                    myResolve(); // when successful
                    myReject();  // when error
                });
                // "Consuming Code" (Must wait for a fulfilled Promise)
                myPromise.then(
                    function(value) { /* code if successful */ },
                    function(error) { /* code if some error */ }
                );
        - When the producing code obtains the result, it should call one of the two callbacks:
            - When Success Call myResolve(result value)
            - When Error Call myReject(error object)
    - Promise Object Properties:
        - A JavaScript Promise object can be:
            - Pending
            - Fulfilled
            - Rejected
        - The Promise object supports two properties: state and result.
        - While a Promise object is "pending" (working), the result is undefined.
        - When a Promise object is "fulfilled", the result is a value.
        - When a Promise object is "rejected", the result is an error object.
            - myPromise.state	    - myPromise.result
                "pending"	             undefined
                "fulfilled"	             a result value
                "rejected"	             an error object
        - You cannot access the Promise properties state and result.
        - You must use a Promise method to handle promises.
    - Promise How To:
        - Here is how to use a Promise:
            myPromise.then(
                function(value) { /* code if successful */ },
                function(error) { /* code if some error */ }
            );
        - Promise.then() takes two arguments, a callback for success and another for failure.
        - Both are optional, so you can add a callback for success or failure only.
        - Example
            function myDisplayer(some) {
                document.getElementById("demo").innerHTML = some;
            }
            let myPromise = new Promise(function(myResolve, myReject) {
                let x = 0;
                // The producing code (this may take some time)
                if (x == 0) {
                    myResolve("OK");
                } else {
                    myReject("Error");
                }
            });
            myPromise.then(
                function(value) {myDisplayer(value);},
                function(error) {myDisplayer(error);}
            );
    - JavaScript Promise Examples:
        - To demonstrate the use of promises, we will use the callback examples from the previous chapter:
            - Waiting for a Timeout
            - Waiting for a File
        - Waiting for a Timeout:
            - Example Using Callback
                setTimeout(function() { myFunction("I love You !!!"); }, 3000);
                function myFunction(value) {
                    document.getElementById("demo").innerHTML = value;
                }
            - Example Using Promise
                let myPromise = new Promise(function(myResolve, myReject) {
                    setTimeout(function() { myResolve("I love You !!"); }, 3000);
                });

                myPromise.then(function(value) {
                    document.getElementById("demo").innerHTML = value;
                });
        - Waiting for a file:
            - Example using Callback
                function myDisplayer(some) {
                    document.getElementById("demo").innerHTML = some;
                }
                function getFile(myCallback) {
                    let req = new XMLHttpRequest();
                    req.open('GET', "mycar.html");
                    req.onload = function() {
                        if (req.status == 200) {
                        myCallback(req.responseText);
                        } else {
                        myCallback("Error: " + req.status);
                        }
                    }
                    req.send();
                }
                getFile(myDisplayer);
            - Example using Promise:
                function myDisplayer(some) {
                    document.getElementById("demo").innerHTML = some;
                }
                let myPromise = new Promise(function(myResolve, myReject) {
                    let req = new XMLHttpRequest();
                    req.open('GET', "mycar.htm");
                    req.onload = function() {
                        if (req.status == 200) {
                        myResolve(req.response);
                        } else {
                        myReject("File not Found");
                        }
                    };
                    req.send();
                });

                myPromise.then(
                    function(value) {myDisplayer(value);},
                    function(error) {myDisplayer(error);}
                );
###############################################
JavaScript Async
    - "async and await make promises easier to write"
    - async makes a function return a Promise
    - await makes a function wait for a Promise
    - Async Syntax:
        - The keyword async before a function makes the function return a promise:
        - Example 1: 
            async function myFunction() {
                return "Hello";
            }
            Is the same as:
            function myFunction() {
                return Promise.resolve("Hello");
            }
            Here is how to use the Promise:
            myFunction().then(
                function(value) { /* code if successful */ },
                function(error) { /* code if some error */ }
            );
        - Example 2:
            function myDisplayer(some) {
                document.getElementById("demo").innerHTML = some;
            }
            async function myFunction() {
                return "Hello";
            }
            myFunction().then(
                function(value) {myDisplayer(value);},
                function(error) {myDisplayer(error);}
            );
        - Or simpler, since you expect a normal value (a normal response, not an error):
        - Example
            async function myFunction() {
                return "Hello";
            }
            myFunction().then(
                function(value) {myDisplayer(value);}
            );
    - Await Syntax
        - The await keyword can only be used inside an async function.
        - The await keyword makes the function pause the execution and wait for a resolved promise before it continues:
            let value = await promise;
    - Example:
        - Basic Syntax:
            async function myDisplay() {
                let myPromise = new Promise(function(resolve, reject) {
                    resolve("I love You !!");
                });
                document.getElementById("demo").innerHTML = await myPromise;
            }

            myDisplay();
        - The two arguments (resolve and reject) are pre-defined by JavaScript.
        - We will not create them, but call one of them when the executor function is ready.
        - Very often we will not need a reject function.
    - Example without reject:
        async function myDisplay() {
            let myPromise = new Promise(function(resolve) {
                resolve("I love You !!");
            });
            document.getElementById("demo").innerHTML = await myPromise;
        }
        myDisplay();
    - Waiting for a Timeout:
        async function myDisplay() {
            let myPromise = new Promise(function(resolve) {
                setTimeout(function() {resolve("I love You !!");}, 3000);
            });
            document.getElementById("demo").innerHTML = await myPromise;
        }
        myDisplay();
    - Waiting for a File;
        async function getFile() {
            let myPromise = new Promise(function(resolve) {
                let req = new XMLHttpRequest();
                req.open('GET', "mycar.html");
                req.onload = function() {
                    if (req.status == 200) {
                        resolve(req.response);
                    } else {
                        resolve("File not Found");
                    }
                };
                req.send();
            });
            document.getElementById("demo").innerHTML = await myPromise;
        }
        getFile();